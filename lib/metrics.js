// Generated by CoffeeScript 1.11.1
(function() {
  var d3, db, levelup, levelws, util;

  levelup = require('levelup');

  levelws = require('level-ws');

  db = levelws(levelup("db"));

  d3 = require('d3');

  util = require('util');

  module.exports = {

    /*
      `get(callback)` 
      ——————— 
      returns some hard-coded metrics 
    
      `callback`: callback function
     */
    get_test: function(callback) {
      return callback(null, [
        {
          timestamp: (new Date('2013-11-04 14:00 UTC')).getTime(),
          value: 12
        }, {
          timestamp: (new Date('2013-11-04 14:30 UTC')).getTime(),
          value: 15
        }
      ]);
    },
    put: function(id, metrics, callback) {
      var i, len, metric, results, timestamp, value;
      results = [];
      for (i = 0, len = metrics.length; i < len; i++) {
        metric = metrics[i];
        timestamp = metric.timestamp, value = metric.value;
        console.log(timestamp, value);
        results.push(db.put("metric:" + id + ":" + timestamp, value, function(err) {
          if (err) {
            callback(err);
          }
          return db.get("metric:" + id + ":" + timestamp, function(err, val) {
            if (err) {
              callback(err);
            }
            return callback(null, val);
          });
        }));
      }
      return results;
    },
    get: function(user_id, chart_id, timestamp, callback) {
      return db.get("metric:" + user_id + ":" + chart_id + ":" + timestamp, function(err, val) {
        if (err) {
          callback(err);
        }
        return callback(null, val);
      });
    },
    readStream: function(user_id, chart_id, callback) {
      var stream, x, y;
      x = '[';
      y = '';
      stream = db.createReadStream({
        start: 'metric:1:1:2013-01-09',
        end: 'metric:1:1:2013-01-11'
      });
      stream.on('data', function(val) {
        var z;
        console.log(val.value);
        z = val.key.split(':');
        z = z[3];
        y = val.value;
        return x += JSON.stringify({
          timestamp: z,
          value: y
        }) + ',';
      });
      return stream.on('close', function() {
        x = x.slice(0, -1) + ']';
        x = JSON.stringify(x);
        return callback(null, x);
      });
    },
    remove: function(id, timestamp, callback) {
      return db.del("metric:" + id + ":" + timestamp, function(err) {
        if (err) {
          return callback(err);
        }
      });
    },
    batch: function(metrics, callback) {
      db.batch(metrics, function(err) {
        if (err) {
          return callback(err);
        }
      });
      return db.get("metric:1:2013-01-09", function(err, val) {
        if (err) {
          callback(err);
        }
        return callback(null, val);
      });
    },
    save: function(id, metrics, callback) {
      var i, len, metric, results;
      console.log("heyy");
      console.log(metrics.length);
      console.log(util.inspect(metrics, false, null));
      results = [];
      for (i = 0, len = metrics.length; i < len; i++) {
        metric = metrics[i];
        results.push(console.log("heyy"));
      }
      return results;
    }
  };

}).call(this);
